(ns patterns.examples
  (:require [clojure.java.io :as io]
            [clojure.string :as str]
            [java-time :as time]
            [patterns.core :as patterns]
            [patterns.graphs :as graphs]
            [patterns.pipes :as pipes]
            [patterns.tile :as tile]
            [patterns.transform :as transform]
            [patterns.utils.paths :as utils.paths]
            [patterns.utils.svg :as svg]
            [inkspot.color :as ink.color]
            [inkspot.color-chart :as ink.cc]
            [inkspot.color-chart.lindsay :as ink.lindsay]
            [inkspot.color-chart.x11 :as ink.x11]
            [mikera.image.core :as img]
            [patterns.utils :as utils]
            [patterns.shatter :as shatter]
            [taoensso.timbre :as log]
            [taoensso.tufte :as trace]
            [patterns.utils.log :as u.log])
  (:import [java.time LocalDate]
           [java.awt Color]))

(def INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 1080)

(defn date->week
  [[year month day]]
  [year
   (-> (time/as
         (java-time/local-date year month day)
         :day-of-year)
       (/ 7)
       float
       (Math/floor)
       int)])

(defn week->date
  [year n]
  (let [^LocalDate local-date (time/plus (time/local-date year)
                                         (time/days (* 7 n)))]
    [(.getYear local-date)
     (.getMonth local-date)
     (.getDayOfMonth local-date)]))

(defn indexed-days-of-week
  [[year month day]]
  (map (fn [local-date]
         [(.getValue (.getDayOfWeek ^LocalDate local-date))
          (.getYear ^LocalDate local-date)
          (.getMonthValue ^LocalDate local-date)
          (.getDayOfMonth ^LocalDate local-date)])
       (take 7
             (time/iterate time/plus (time/local-date year month day) (time/days 1)))))

(defn render
  [[year month day] src description]
  (let [filename (format "./doc/%s-%s-%s"
                         year
                         month
                         day)]
    (try
      (log/info description)
      (patterns/render
        filename
        src
        :png)
      (spit (str filename ".txt") description)
      (catch Error e
        (log/error e)
        (throw (ex-info "Error" {} e))))))

(defn instagram-2018-47
  []
  (let [gen-fn (fn [idx_1_based year month day]
                 (let [pipe-endpoints (inc (rand-int 3))
                       line-fn (if (= 1 pipe-endpoints)
                                 svg/quadratic
                                 (partial utils.paths/single-bend-line-fn (* idx_1_based idx_1_based)))
                       grid-size (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         day pipe-endpoints))
                       description (format
                                     (str "Generated using %s x %s tiles to represent the day of the month."
                                          " Each tile is generated by rotating a pipe pattern. In this image"
                                          " each pipe tile has %s endpoints (chosen at random), meaning that"
                                          " the tile matches up to tiles around it via %s points on each edge."
                                          " In this way, pipes seem to continue seamlessly through the image."
                                          "\n.\n.\n"
                                          "Each line which connects two endpoints, has %s colours to"
                                          " represent the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each colour is based on the grayscale."
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     day day
                                     pipe-endpoints pipe-endpoints
                                     idx_1_based)
                       {:keys [style path-fn]} (svg/multi-stroke (for [i (range idx_1_based)]
                                                                   (let [gray-tone (int (max 0
                                                                                             (- 255
                                                                                                (* (inc i)
                                                                                                   (/ 255 idx_1_based)))))
                                                                         line-width (int (* (inc i)
                                                                                            (/ grid-size
                                                                                               idx_1_based)))]
                                                                     {:width line-width
                                                                      :colour {:r gray-tone
                                                                               :g gray-tone
                                                                               :b gray-tone}})))
                       hiccup-svg (tile/grid
                                    (pipes/swatches
                                      pipe-endpoints pipe-endpoints
                                      {:line-fn (fn [& args]
                                                  (path-fn (apply line-fn args)))
                                       :style style
                                       :grid-size grid-size})
                                    day day
                                    {:transform-fn tile/transform-rotate})]
                   (render [year month day]
                           hiccup-svg
                           description)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 47))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2018-48
  []
  (let [colours (->> (concat ink.cc/web-safe-colors
                             (vals ink.lindsay/swatch)
                             (vals ink.x11/swatch))
                     (map ink.color/coerce)
                     (map (fn [^Color c]
                            (.getRGB c))))
        colours-count (count colours)
        noise-swatch-fn (trace/fnp noise-swatch [height-width]
                          (let [noise-swatch-img (img/new-image height-width height-width)
                                pixels (img/get-pixels noise-swatch-img)
                                noise-swatch (patterns/tmp-resource)]
                            (dotimes [i (* height-width height-width)]
                              (aset pixels i
                                    (nth colours (rand-int colours-count))))
                            (img/set-pixels noise-swatch-img pixels)
                            (img/write noise-swatch-img
                                       noise-swatch
                                       "png"
                                       :quality 1.0)
                            noise-swatch))
        gen-fn (fn [idx_1_based year month day]
                 (let [height-width (-> (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                           idx_1_based)
                                        (Math/ceil)
                                        int)
                       noise-swatch (noise-swatch-fn height-width)
                       description (format
                                     (str "Generated using %s x %s tiles to represent the day of the week"
                                          " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each tile is generated by choosing random noise from the known"
                                          " \"colour safe\" web colours."
                                          "\n.\n.\n"
                                          "The bars along the bottom edge are the %s average colours as determined"
                                          " by \"k-means clustering/Voronoi cells\". %s here represents the day"
                                          " of the month."
                                          "\n.\n.\n"
                                          "To read more about how we grouped and averaged the colours, see:"
                                          " https://en.wikipedia.org/wiki/K-means_clustering"
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based idx_1_based
                                     day day)
                       cluster-data (graphs/k-means-png-data noise-swatch day)
                       hiccup-svg (tile/grid
                                    [(graphs/bar-overlay
                                       [:svg
                                        {:height height-width
                                         :width height-width}
                                        [:defs {}]
                                        [:image {:height height-width
                                                 :width height-width
                                                 :xlink:href noise-swatch
                                                 :x 0 :y 0}]]
                                       (->> cluster-data
                                            (sort-by second)
                                            reverse
                                            (graphs/bar
                                              {:height height-width
                                               :width height-width}))
                                       {:opacity 1.0})]
                                    idx_1_based idx_1_based)]
                   (render [year month day]
                           hiccup-svg
                           description)
                   (io/delete-file noise-swatch)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 48))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2018-49
  []
  (let [png-swatches (->> "./swatches/png/nature"
                          io/resource
                          io/file
                          file-seq
                          rest)
        tile-width-height (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 2)
        path->svg (fn [path {:keys [height width]}]
                    [:svg {:height tile-width-height :width tile-width-height}
                     [:defs {}]
                     [:image {:xlink:href path
                              :height height
                              :width width
                              :x 0 :y 0}]])
        svg-swatches (into []
                           (comp (map (juxt str img/load-image))
                                 (map (fn [[path image]]
                                        (path->svg path
                                                   {:height (img/height image)
                                                    :width (img/width image)}))))
                           png-swatches)
        gen-fn (fn [idx_1_based year month day svg-swatch]
                 (let [hist-path (transform/shuffle svg-swatch)
                       k-means-swatch (transform/tile-shuffle-k-means svg-swatch day
                                                                      {:height tile-width-height
                                                                       :width tile-width-height})
                       raster-swatch (transform/rasterize svg-swatch (inc idx_1_based))
                       description (format
                                     (str "Generated using selected source images, raw is present in the top left corner."
                                          "\n.\n.\n"
                                          "The top right corner is all of the pixels in the image"
                                          " randomly shuffled up."
                                          "\n.\n.\n"
                                          "The bottom left corner in the"
                                          " are the %s average colours as determined"
                                          " by \"k-means clustering/Voronoi cells\". %s here represents the day"
                                          " of the month."
                                          "\n.\n.\n"
                                          "The bottom right corner is the original image rasterized"
                                          " by using the %s + 1 average colours, where %s represents"
                                          " the day of the week"
                                          " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          "\n.\n.\n"
                                          "To read more about how we grouped and averaged the colours, see:"
                                          " https://en.wikipedia.org/wiki/K-means_clustering"
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based idx_1_based
                                     day day)
                       hiccup-svg (tile/grid
                                    [svg-swatch
                                     (path->svg hist-path
                                                {:height tile-width-height
                                                 :width tile-width-height})
                                     k-means-swatch
                                     (path->svg raster-swatch
                                                {:height tile-width-height
                                                 :width tile-width-height})]
                                    2 2)]
                   (render [year month day]
                           hiccup-svg
                           description)
                   (io/delete-file hist-path)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 49))]
      (gen-fn idx_1_based year month day (nth svg-swatches (dec idx_1_based))))))

(defn instagram-2018-50
  []
  (let [c (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                  2))
        r c
        gen-fn (fn [[tag attrs] idx_1_based year month day]
                 (render [year month day]
                         [:svg
                          {:height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                           :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                          [:defs {}
                           [:filter {:id "main"
                                     :x 0 :y 0
                                     :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                     :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                            [:feImage {:result "i0" :xlink:href "#g0"}]
                            [:feImage {:result "i1" :xlink:href "#g1"}]
                            [:feImage {:result "i2" :xlink:href "#g2"}]
                            [:feBlend {:result "b0" :in "i0" :in2 "i1" :mode "multiply"}]
                            [:feBlend {:in "i2" :in2 "b0" :mode "multiply"}]]
                           [:g {:id "g0"
                                :transform (format "translate(%s, %s)"
                                                   c (- c day))}
                            [tag (assoc attrs
                                   :fill "rgb(0, 255, 255)"
                                   :stroke "rgb(0, 255, 255)")]]
                           [:g {:id "g1"
                                :transform (format "translate(%s, %s)"
                                                   (- c day) (+ c day))}
                            [tag (assoc attrs
                                   :fill "rgb(255, 0, 255)"
                                   :stroke "rgb(255, 0, 255)")]]
                           [:g {:id "g2"
                                :transform (format "translate(%s, %s)"
                                                   (+ c day) (+ c day))}
                            [tag (assoc attrs
                                   :fill "rgb(255, 255, 0)"
                                   :stroke "rgb(255, 255, 0)")]]]
                          [:rect {:x 0 :y 0
                                  :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :style "filter:url(#main);"}]]
                         (format
                           (str "A shape which has %s points. The number"
                                " of points represents the day of the week"
                                " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                "\n.\n.\n"
                                "The shattered colour border surrounding the shape, has a"
                                " width which is %s pixels to represent the day of the month."
                                "\n.\n.\n"
                                "To see the code which generated this, see:"
                                " http://bit.ly/be-nice-now-social-media-examples")
                           idx_1_based
                           day)))
        [circle line & polygons] (indexed-days-of-week (week->date 2018 50))]
    (apply gen-fn [:circle {:cx 0 :cy 0 :r r}] circle)
    (apply gen-fn [:line {:x1 (- (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         4))) :y1 0
                          :x2 (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                      4)) :y2 0
                          :stroke-width r
                          :stroke-linecap "round"}]
           line)
    (doseq [[idx_1_based year month day] polygons]
      (gen-fn [:polygon {:points (->> (range 0 (* 2 Math/PI) (/ (* 2 Math/PI) idx_1_based))
                                      (take idx_1_based)
                                      (map (fn [degree]
                                             (format "%s,%s"
                                                     (int (* r (Math/cos (double degree))))
                                                     (int (* r (Math/sin (double degree)))))))
                                      (str/join " "))}]
              idx_1_based year month day))))

(defn instagram-2018-51
  []
  (let [ceil (fn [n] (int (Math/ceil n)))
        line-segments (fn [{[x0 y0] :start
                            [x4 y4] :end}]
                        (let [x-segment (ceil (/ (- x4 x0) 4))
                              y-segment (ceil (/ (- y4 y0) 4))]
                          {:segments (concat (for [i (range 0 4)]
                                               [(+ (* i x-segment) x0)
                                                (+ (* i y-segment) y0)])
                                             [[x4 y4]])
                           :length (Math/sqrt (+ (* x-segment x-segment)
                                                 (* y-segment y-segment)))}))
        arc-fn (fn [points]
                 (let [{:keys [segments length]} (line-segments points)
                       [x1 y1] (second segments)
                       [x3 y3] (nth segments 3)
                       [x4 y4] (last segments)]
                   (format "L %s %s A %s %s 0 0 1 %s %s L %s %s"
                           x1 y1
                           (ceil length)
                           (ceil length)
                           x3 y3
                           x4 y4)))
        control-padding (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 10))
        control-width-height (- INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                (* 2 control-padding))
        border-control-points (zipmap (pipes/points 1 1 {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                         :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT})
                                      (map (fn [[x y]]
                                             [(+ control-padding
                                                 x)
                                              (+ control-padding
                                                 y)])
                                           (pipes/points 1 1 {:width control-width-height
                                                              :height control-width-height})))
        gen-fn (fn [idx_1_based year month day]
                 (let [control-points (repeatedly idx_1_based
                                                  (fn []
                                                    [(+ (rand-int control-width-height)
                                                        control-padding)
                                                     (+ (rand-int control-width-height)
                                                        control-padding)]))
                       description (format
                                     (str "Generated using %s random points to"
                                          " represent the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each point is intersected twice, once each by two continuous lines"
                                          " crossing the image."
                                          "\n.\n.\n"
                                          "Since today is %s, the colour scheme is %s"
                                          "\n.\n.\n"
                                          "The shattered colour border surrounding the shape, has a"
                                          " width which is %s pixels to represent the day of the month."
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based
                                     (if (even? day)
                                       "even"
                                       "odd")
                                     (if (even? day)
                                       "light"
                                       "dark")
                                     day)
                       line-fn (fn [_dimensions {[x0 y0] :start
                                                 [xn yn] :end}]
                                 (let [points (concat
                                                [(get border-control-points
                                                      (list x0 y0))]
                                                (shuffle control-points)
                                                [(get border-control-points
                                                      (list xn yn))])
                                       [x1 y1] (first points)]
                                   [:path
                                    {:d (format "M %s %s L %s %s %s L %s %s"
                                                x0
                                                y0
                                                x1
                                                y1
                                                (str/join " "
                                                          (map (fn [xy_n xy_n1]
                                                                 (arc-fn {:start xy_n
                                                                          :end xy_n1}))
                                                               (butlast points)
                                                               (rest points)))
                                                xn
                                                yn)
                                     :stroke-linecap "square"
                                     :stroke-linejoin "miter"}]))
                       [colour shatter-fn background] (if (even? day)
                                                        [month shatter/dark "white"]
                                                        [(- 255 month) shatter/light "black"])
                       {:keys [style path-fn]} (svg/multi-stroke [{:width 50
                                                                   :colour {:r colour
                                                                            :g colour
                                                                            :b colour}}])
                       [hiccup-svg] (pipes/swatches
                                      1 1
                                      {:line-fn (fn [& args]
                                                  (path-fn (apply line-fn args)))
                                       :style style
                                       :grid-size (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                          2))})]
                   (render [year month day]
                           [:svg
                            {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                             :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                            [:defs {}]
                            [:rect {:fill background
                                    :x 0 :y 0
                                    :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                    :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]
                            (shatter-fn hiccup-svg day)]
                           description)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 51))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2018-52
  []
  (let [colours (->> (concat ink.cc/web-safe-colors
                             (vals ink.lindsay/swatch)
                             (vals ink.x11/swatch))
                     (map ink.color/coerce)
                     (map (fn [^Color c]
                            {:a (float (/ (.getAlpha c)
                                          255))
                             :r (.getRed c)
                             :g (.getGreen c)
                             :b (.getBlue c)})))
        noise-swatch-fn (trace/fnp noise-swatch [palette height-width]
                          (let [noise-swatch-img (img/new-image height-width height-width)
                                pixels (img/get-pixels noise-swatch-img)
                                noise-swatch (patterns/tmp-resource)
                                palette-count (count palette)]
                            (dotimes [i (* height-width height-width)]
                              (aset pixels i
                                    (.getRGB ^Color (ink.color/coerce (nth palette (rand-int palette-count))))))
                            (img/set-pixels noise-swatch-img pixels)
                            (img/write noise-swatch-img
                                       noise-swatch
                                       "png"
                                       :quality 1.0)
                            noise-swatch))
        starting-dimensions (->> (map (partial bit-shift-left 1)
                                      (range))
                                 (take-while (partial > INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT))
                                 reverse)
        gen-fn (fn [idx_1_based year month day]
                 (let [starting-dimension (->> starting-dimensions
                                               (take (inc day))
                                               last)
                       {:keys [to-delete
                               hiccup-svg]}
                       (loop [accum [:svg {:width starting-dimension
                                           :height starting-dimension}
                                     [:defs {}]
                                     [:rect {:width starting-dimension
                                             :height starting-dimension
                                             :style "fill:rgb(0,0,0)"}]]
                              to-delete []
                              previous-colours {:r 255 :g 255 :b 255}
                              square-dimension starting-dimension]
                         (log/info "Accumulating..." {:to-delete to-delete
                                                      :previous-colours previous-colours
                                                      :square-dimension square-dimension})
                         (if (< (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                   2)
                                square-dimension)
                           {:to-delete to-delete
                            :hiccup-svg accum}
                           (let [channel-swatches (into {}
                                                        (for [[channel v] previous-colours]
                                                          (let [_ (log/debug "Making swatch...")
                                                                clamped-colours (filter (fn [c]
                                                                                          (<= (get c channel) v))
                                                                                        colours)
                                                                noise-swatch (noise-swatch-fn clamped-colours
                                                                                              square-dimension)
                                                                cluster-data (->> (graphs/k-means-png-data
                                                                                    noise-swatch
                                                                                    (min square-dimension
                                                                                         idx_1_based))
                                                                                  (sort-by second)
                                                                                  reverse)]
                                                            (log/debug "...swatch made!")
                                                            [channel
                                                             {:to-delete noise-swatch
                                                              :cluster-data cluster-data
                                                              :colour (get-in (vec cluster-data) [0 0 channel])
                                                              :swatch (graphs/bar-overlay
                                                                        [:svg
                                                                         {:height square-dimension
                                                                          :width square-dimension}
                                                                         [:defs {}]
                                                                         [:image {:height square-dimension
                                                                                  :width square-dimension
                                                                                  :xlink:href noise-swatch
                                                                                  :x 0 :y 0}]]
                                                                        (graphs/bar
                                                                          {:height square-dimension
                                                                           :width square-dimension}
                                                                          cluster-data)
                                                                        {:opacity 1.0})}])))]
                             (def snag [accum channel-swatches])
                             (recur
                               (tile/grid
                                 (cons accum
                                       [(get-in channel-swatches [:r :swatch])
                                        (get-in channel-swatches [:b :swatch])
                                        (get-in channel-swatches [:g :swatch])])
                                 2 2
                                 {:transform-fn tile/transform-rotate})
                               (concat to-delete (map :to-delete (vals channel-swatches)))
                               {:r (get-in channel-swatches [:r :colour])
                                :g (get-in channel-swatches [:g :colour])
                                :b (get-in channel-swatches [:b :colour])}
                               (* 2 square-dimension)))))]
                   (render [year month day]
                           hiccup-svg
                           (format
                             (str "Generated using %s (day of the month) steps. Each step consists of"
                                  " first using the image created by the previous step, and then"
                                  " making three new images: one for each channel in the digital"
                                  " colour spectrum (ie, red, green, and blue)."
                                  "\n.\n.\n"
                                  "Steps are linked together via sequential powers, similar to"
                                  " the Fibonnaci sequence. However, unlike the classic nautilus shell"
                                  " example, each step is able to rotate the previous image at will."
                                  "\n.\n.\n"
                                  "https://en.wikipedia.org/wiki/Fibonacci_number"
                                  " https://en.wikipedia.org/wiki/Power_of_two"
                                  " https://en.wikipedia.org/wiki/Golden_spiral"
                                  "\n.\n.\n"
                                  "Each step also overlays a the most common %s colours over"
                                  " the given tile. %s is"
                                  " the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                  "\n.\n.\n"
                                  "We used a similar method for making the overlayed colours back"
                                  " in https://www.instagram.com/p/Bq7nzd3hYzg/"
                                  "\n.\n.\n"
                                  "To see the code which generated this, see:"
                                  " http://bit.ly/be-nice-now-social-media-examples")
                             day
                             idx_1_based
                             idx_1_based))
                   (doseq [f to-delete]
                     (log/debugf "deleting %s. Result: %s"
                                 f
                                 (io/delete-file f)))))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 52))]
      (gen-fn idx_1_based year month day))))

(comment
  (trace/profile {} (instagram-2018-47))
  (trace/profile {} (instagram-2018-48))
  (trace/profile {} (instagram-2018-49))
  (trace/profile {} (instagram-2018-50))
  (trace/profile {} (instagram-2018-51))
  (trace/profile {} (instagram-2018-52)))
