(ns patterns.examples
  (:require [clojure.java.io :as io]
            [java-time :as time]
            [patterns.core :as patterns]
            [patterns.graphs :as graphs]
            [patterns.pipes :as pipes]
            [patterns.tile :as tile]
            [patterns.transform :as transform]
            [patterns.utils.paths :as utils.paths]
            [patterns.utils.svg :as svg]
            [inkspot.color :as ink.color]
            [inkspot.color-chart :as ink.cc]
            [inkspot.color-chart.lindsay :as ink.lindsay]
            [inkspot.color-chart.x11 :as ink.x11]
            [mikera.image.core :as img])
  (:import [java.time LocalDate]
           [java.awt Color]))

(def INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 1080)

(defn date->week
  [[year month day]]
  [year
   (-> (time/as
         (java-time/local-date year month day)
         :day-of-year)
       (/ 7)
       float
       (Math/floor)
       int)])

(defn week->date
  [year n]
  (let [^LocalDate local-date (time/plus (time/local-date year)
                                         (time/days (* 7 n)))]
    [(.getYear local-date)
     (.getMonth local-date)
     (.getDayOfMonth local-date)]))

(defn indexed-days-of-week
  [[year month day]]
  (map (fn [local-date]
         [(.getValue (.getDayOfWeek ^LocalDate local-date))
          (.getDayOfMonth ^LocalDate local-date)])
       (take 7
             (time/iterate time/plus (time/local-date year month day) (time/days 1)))))

(defn render
  [[month day] src description]
  (let [filename (format "./doc/2018-%s-%s"
                         month
                         day)]
    (try
      (println description)
      (patterns/render
        filename
        src
        :png)
      (spit (str filename ".txt") description)
      (catch Error e
        (println e)
        (throw (ex-info "Error" {} e))))))

(defn instagram-2018-47
  []
  (let [gen-fn (fn [month idx_1_based day]
                 (let [pipe-endpoints (inc (rand-int 3))
                       line-fn (if (= 1 pipe-endpoints)
                                 svg/quadratic
                                 (partial utils.paths/single-bend-line-fn (* idx_1_based idx_1_based)))
                       grid-size (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         day pipe-endpoints))
                       description (format
                                     (str "Generated using %s x %s tiles to represent the day of the month."
                                          " Each tile is generated by rotating a pipe pattern. In this image"
                                          " each pipe tile has %s endpoints (chosen at random), meaning that"
                                          " the tile matches up to tiles around it via %s points on each edge."
                                          " In this way, pipes seem to continue seamlessly through the image."
                                          "\n.\n.\n"
                                          "Each line which connects two endpoints, has %s colours to"
                                          " represent the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each colour is based on the grayscale."
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     day day
                                     pipe-endpoints pipe-endpoints
                                     idx_1_based)
                       {:keys [style path-fn]} (svg/multi-stroke (for [i (range idx_1_based)]
                                                                   (let [gray-tone (int (max 0
                                                                                             (- 255
                                                                                                (* (inc i)
                                                                                                   (/ 255 idx_1_based)))))
                                                                         line-width (int (* (inc i)
                                                                                            (/ grid-size
                                                                                               idx_1_based)))]
                                                                     {:width line-width
                                                                      :colour {:r gray-tone
                                                                               :g gray-tone
                                                                               :b gray-tone}})))
                       hiccup-svg (tile/grid
                                    (pipes/swatches
                                      pipe-endpoints pipe-endpoints
                                      {:line-fn (fn [& args]
                                                  (path-fn (apply line-fn args)))
                                       :style style
                                       :grid-size grid-size})
                                    day day
                                    {:transform-fn tile/transform-rotate})]
                   (render [month day]
                           hiccup-svg
                           description)))]
    (doseq [[idx_1_based day] (indexed-days-of-week (week->date 2018 47))]
      (gen-fn 11 idx_1_based day))))

(defn instagram-2018-48
  []
  (let [colours (->> (concat ink.cc/web-safe-colors
                             (vals ink.lindsay/swatch)
                             (vals ink.x11/swatch))
                     (map ink.color/coerce)
                     (map (fn [^Color c]
                            (.getRGB c))))
        colours-count (count colours)
        noise-swatch-fn (fn [height-width]
                          (println "::: generating noise ::: " height-width)
                          (let [noise-swatch-img (img/new-image height-width height-width)
                                pixels (img/get-pixels noise-swatch-img)
                                noise-swatch (patterns/tmp-resource)]
                            (dotimes [i (* height-width height-width)]
                              (aset pixels i
                                    (nth colours (rand-int colours-count))))
                            (img/set-pixels noise-swatch-img pixels)
                            (img/write noise-swatch-img
                                       noise-swatch
                                       "png"
                                       :quality 1.0)
                            (println "::: noise generated")
                            noise-swatch))
        gen-fn (fn [month idx_1_based day]
                 (let [height-width (-> (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                           idx_1_based)
                                        (Math/ceil)
                                        int)
                       noise-swatch (noise-swatch-fn height-width)
                       description (format
                                     (str "Generated using %s x %s tiles to represent the day of the week"
                                          " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each tile is generated by choosing random noise from the known"
                                          " \"colour safe\" web colours."
                                          "\n.\n.\n"
                                          "The bars along the bottom edge are the %s average colours as determined"
                                          " by \"k-means clustering/Voronoi cells\". %s here represents the day"
                                          " of the month."
                                          "\n.\n.\n"
                                          "To read more about how we grouped and averaged the colours, see:"
                                          " https://en.wikipedia.org/wiki/K-means_clustering"
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based idx_1_based
                                     day day)
                       _ (println ":: clustering ::: " day)
                       cluster-data (graphs/k-means-png-data noise-swatch day)
                       _ (println ":: clustering complete")
                       hiccup-svg (tile/grid
                                    [(graphs/bar-overlay
                                       [:svg
                                        {:height height-width
                                         :width height-width}
                                        [:defs {}]
                                        [:image {:height height-width
                                                 :width height-width
                                                 :xlink:href noise-swatch
                                                 :x 0 :y 0}]]
                                       (->> cluster-data
                                            (sort-by second)
                                            reverse
                                            (graphs/bar
                                              {:height height-width
                                               :width height-width}))
                                       {:opacity 1.0})]
                                    idx_1_based idx_1_based)]
                   (render [month day]
                           hiccup-svg
                           description)
                   (println ":: deleting ::: " noise-swatch)
                   (io/delete-file noise-swatch)))]

    (doseq [[idx_1_based day] (indexed-days-of-week (week->date 2018 48))]
      (gen-fn 12 idx_1_based day))))

(defn instagram-2018-49
  []
  (let [png-swatches (->> "./swatches/png/nature"
                          io/resource
                          io/file
                          file-seq
                          rest)
        tile-width-height (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 2)
        path->svg (fn [path {:keys [height width]}]
                    [:svg {:height tile-width-height :width tile-width-height}
                     [:defs {}]
                     [:image {:xlink:href path
                              :height height
                              :width width
                              :x 0 :y 0}]])
        svg-swatches (into []
                           (comp (map (juxt str img/load-image))
                                 (map (fn [[path image]]
                                        (path->svg path
                                                   {:height (img/height image)
                                                    :width (img/width image)}))))
                           png-swatches)
        gen-fn (fn [month idx_1_based day svg-swatch]
                 (let [_ (println "::: histing")
                       hist-path (transform/shuffle svg-swatch)
                       _ (println "::: clustering")
                       k-means-swatch (transform/tile-shuffle-k-means svg-swatch day
                                                                      {:height tile-width-height
                                                                       :width tile-width-height})
                       _ (println "::: rasterizing")
                       raster-swatch (transform/rasterize svg-swatch (inc idx_1_based))
                       description (format
                                     (str "Generated using selected source images, raw is present in the top left corner."
                                          "\n.\n.\n"
                                          "The top right corner is all of the pixels in the image"
                                          " randomly shuffled up."
                                          "\n.\n.\n"
                                          "The bottom left corner in the"
                                          " are the %s average colours as determined"
                                          " by \"k-means clustering/Voronoi cells\". %s here represents the day"
                                          " of the month."
                                          "\n.\n.\n"
                                          "The bottom right corner is the original image rasterized"
                                          " by using the %s + 1 average colours, where %s represents"
                                          " the day of the week"
                                          " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          "\n.\n.\n"
                                          "To read more about how we grouped and averaged the colours, see:"
                                          " https://en.wikipedia.org/wiki/K-means_clustering"
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based idx_1_based
                                     day day)
                       hiccup-svg (tile/grid
                                    [svg-swatch
                                     (path->svg hist-path
                                                {:height tile-width-height
                                                 :width tile-width-height})
                                     k-means-swatch
                                     (path->svg raster-swatch
                                                {:height tile-width-height
                                                 :width tile-width-height})]
                                    2 2)]
                   (render [month day]
                           hiccup-svg
                           description)
                   (println ":: deleting hist ::: " hist-path)
                   (io/delete-file hist-path)))]
    (doseq [[idx_1_based day] (indexed-days-of-week (week->date 2018 49))]
      (gen-fn 12 idx_1_based day (nth svg-swatches (dec idx_1_based))))))

(comment
  (instagram-2018-47)
  (instagram-2018-48)
  (instagram-2018-49))
