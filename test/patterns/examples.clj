(ns patterns.examples
  (:require [clojure.java.io :as io]
            [clojure.string :as str]
            [java-time :as time]
            [patterns.core :as patterns]
            [patterns.graphs :as graphs]
            [patterns.pipes :as pipes]
            [patterns.tile :as tile]
            [patterns.transform :as transform]
            [patterns.utils.paths :as utils.paths]
            [patterns.utils.svg :as svg]
            [patterns.utils.svg.polygon :as polygon]
            [inkspot.color :as ink.color]
            [inkspot.color-chart :as ink.cc]
            [inkspot.color-chart.lindsay :as ink.lindsay]
            [inkspot.color-chart.x11 :as ink.x11]
            [mikera.image.core :as img]
            [patterns.utils :as utils]
            [patterns.shatter :as shatter]
            [taoensso.timbre :as log]
            [taoensso.tufte :as trace]
            [patterns.utils.log :as u.log]
            [patterns.layering :as layer])
  (:import [java.time LocalDate]
           [java.awt Color]))

(def INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 1080)

(defn date->week
  [[year month day]]
  [year
   (-> (time/as
         (java-time/local-date year month day)
         :day-of-year)
       (/ 7)
       float
       (Math/floor)
       int)])

(defn week->date
  [year n]
  (let [^LocalDate local-date (time/plus (time/adjust (time/local-date year)
                                                      :first-in-month :monday)
                                         (time/days (* 7 n)))]
    [(.getYear local-date)
     (.getMonth local-date)
     (.getDayOfMonth local-date)]))

(defn indexed-days-of-week
  [[year month day]]
  (map (fn [local-date]
         [(.getValue (.getDayOfWeek ^LocalDate local-date))
          (.getYear ^LocalDate local-date)
          (.getMonthValue ^LocalDate local-date)
          (.getDayOfMonth ^LocalDate local-date)])
       (take 7
             (time/iterate time/plus (time/local-date year month day) (time/days 1)))))

(defn render
  [year-month-day-xs src description]
  (let [filename (str "./doc/"
                      (str/join "-" year-month-day-xs))]
    (try
      (log/info description)
      (patterns/render
        filename
        src
        :png)
      (spit (str filename ".txt") description)
      (catch Error e
        (log/error e)
        (throw (ex-info "Error" {} e))))))

(def poke-palettes
  (->> (io/file "./resources/swatches/png/pokemon/")
       file-seq
       rest
       (map (fn [^java.io.File f]
              (graphs/image->palette f)))))

(defn instagram-2018-47
  []
  (let [gen-fn (fn [idx_1_based year month day]
                 (let [pipe-endpoints (inc (rand-int 3))
                       line-fn (if (= 1 pipe-endpoints)
                                 svg/quadratic
                                 (partial utils.paths/single-bend-line-fn (* idx_1_based idx_1_based)))
                       grid-size (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         day pipe-endpoints))
                       description (format
                                     (str "Generated using %s x %s tiles to represent the day of the month."
                                          " Each tile is generated by rotating a pipe pattern. In this image"
                                          " each pipe tile has %s endpoints (chosen at random), meaning that"
                                          " the tile matches up to tiles around it via %s points on each edge."
                                          " In this way, pipes seem to continue seamlessly through the image."
                                          "\n.\n.\n"
                                          "Each line which connects two endpoints, has %s colours to"
                                          " represent the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each colour is based on the grayscale."
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     day day
                                     pipe-endpoints pipe-endpoints
                                     idx_1_based)
                       {:keys [style path-fn]} (svg/multi-stroke (for [i (range idx_1_based)]
                                                                   (let [gray-tone (int (max 0
                                                                                             (- 255
                                                                                                (* (inc i)
                                                                                                   (/ 255 idx_1_based)))))
                                                                         line-width (int (* (inc i)
                                                                                            (/ grid-size
                                                                                               idx_1_based)))]
                                                                     {:width line-width
                                                                      :colour {:r gray-tone
                                                                               :g gray-tone
                                                                               :b gray-tone}})))
                       hiccup-svg (tile/grid
                                    (pipes/swatches
                                      pipe-endpoints pipe-endpoints
                                      {:line-fn (fn [& args]
                                                  (path-fn (apply line-fn args)))
                                       :style style
                                       :grid-size grid-size})
                                    day day
                                    {:transform-fn tile/transform-rotate})]
                   (render [year month day]
                           hiccup-svg
                           description)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 47))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2018-48
  []
  (let [colours (->> (concat ink.cc/web-safe-colors
                             (vals ink.lindsay/swatch)
                             (vals ink.x11/swatch))
                     (map ink.color/coerce)
                     (map (fn [^Color c]
                            (.getRGB c))))
        colours-count (count colours)
        noise-swatch-fn (trace/fnp noise-swatch [height-width]
                          (let [noise-swatch-img (img/new-image height-width height-width)
                                pixels (img/get-pixels noise-swatch-img)
                                noise-swatch (patterns/tmp-resource)]
                            (dotimes [i (* height-width height-width)]
                              (aset pixels i
                                    (nth colours (rand-int colours-count))))
                            (img/set-pixels noise-swatch-img pixels)
                            (img/write noise-swatch-img
                                       noise-swatch
                                       "png"
                                       :quality 1.0)
                            noise-swatch))
        gen-fn (fn [idx_1_based year month day]
                 (let [height-width (-> (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                           idx_1_based)
                                        (Math/ceil)
                                        int)
                       noise-swatch (noise-swatch-fn height-width)
                       description (format
                                     (str "Generated using %s x %s tiles to represent the day of the week"
                                          " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each tile is generated by choosing random noise from the known"
                                          " \"colour safe\" web colours."
                                          "\n.\n.\n"
                                          "The bars along the bottom edge are the %s average colours as determined"
                                          " by \"k-means clustering/Voronoi cells\". %s here represents the day"
                                          " of the month."
                                          "\n.\n.\n"
                                          "To read more about how we grouped and averaged the colours, see:"
                                          " https://en.wikipedia.org/wiki/K-means_clustering"
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based idx_1_based
                                     day day)
                       cluster-data (graphs/k-means-png-data noise-swatch day)
                       hiccup-svg (tile/grid
                                    [(graphs/bar-overlay
                                       [:svg
                                        {:height height-width
                                         :width height-width}
                                        [:defs {}]
                                        [:image {:height height-width
                                                 :width height-width
                                                 :xlink:href noise-swatch
                                                 :x 0 :y 0}]]
                                       (->> cluster-data
                                            (sort-by second)
                                            reverse
                                            (graphs/bar
                                              {:height height-width
                                               :width height-width}))
                                       {:opacity 1.0})]
                                    idx_1_based idx_1_based)]
                   (render [year month day]
                           hiccup-svg
                           description)
                   (io/delete-file noise-swatch)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 48))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2018-49
  []
  (let [png-swatches (->> "./swatches/png/nature"
                          io/resource
                          io/file
                          file-seq
                          rest)
        tile-width-height (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 2)
        path->svg (fn [path {:keys [height width]}]
                    [:svg {:height tile-width-height :width tile-width-height}
                     [:defs {}]
                     [:image {:xlink:href path
                              :height height
                              :width width
                              :x 0 :y 0}]])
        svg-swatches (into []
                           (comp (map (juxt str img/load-image))
                                 (map (fn [[path image]]
                                        (path->svg path
                                                   {:height (img/height image)
                                                    :width (img/width image)}))))
                           png-swatches)
        gen-fn (fn [idx_1_based year month day svg-swatch]
                 (let [hist-path (transform/shuffle svg-swatch)
                       k-means-swatch (transform/tile-shuffle-k-means svg-swatch day
                                                                      {:height tile-width-height
                                                                       :width tile-width-height})
                       raster-swatch (transform/rasterize svg-swatch (inc idx_1_based))
                       description (format
                                     (str "Generated using selected source images, raw is present in the top left corner."
                                          "\n.\n.\n"
                                          "The top right corner is all of the pixels in the image"
                                          " randomly shuffled up."
                                          "\n.\n.\n"
                                          "The bottom left corner in the"
                                          " are the %s average colours as determined"
                                          " by \"k-means clustering/Voronoi cells\". %s here represents the day"
                                          " of the month."
                                          "\n.\n.\n"
                                          "The bottom right corner is the original image rasterized"
                                          " by using the %s + 1 average colours, where %s represents"
                                          " the day of the week"
                                          " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          "\n.\n.\n"
                                          "To read more about how we grouped and averaged the colours, see:"
                                          " https://en.wikipedia.org/wiki/K-means_clustering"
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based idx_1_based
                                     day day)
                       hiccup-svg (tile/grid
                                    [svg-swatch
                                     (path->svg hist-path
                                                {:height tile-width-height
                                                 :width tile-width-height})
                                     k-means-swatch
                                     (path->svg raster-swatch
                                                {:height tile-width-height
                                                 :width tile-width-height})]
                                    2 2)]
                   (render [year month day]
                           hiccup-svg
                           description)
                   (io/delete-file hist-path)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 49))]
      (gen-fn idx_1_based year month day (nth svg-swatches (dec idx_1_based))))))

(defn instagram-2018-50
  []
  (let [c (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                  2))
        r c
        gen-fn (fn [[tag attrs] idx_1_based year month day]
                 (render [year month day]
                         [:svg
                          {:height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                           :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                          [:defs {}
                           [:filter {:id "main"
                                     :x 0 :y 0
                                     :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                     :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                            [:feImage {:result "i0" :xlink:href "#g0"}]
                            [:feImage {:result "i1" :xlink:href "#g1"}]
                            [:feImage {:result "i2" :xlink:href "#g2"}]
                            [:feBlend {:result "b0" :in "i0" :in2 "i1" :mode "multiply"}]
                            [:feBlend {:in "i2" :in2 "b0" :mode "multiply"}]]
                           [:g {:id "g0"
                                :transform (format "translate(%s, %s)"
                                                   c (- c day))}
                            [tag (assoc attrs
                                   :fill "rgb(0, 255, 255)"
                                   :stroke "rgb(0, 255, 255)")]]
                           [:g {:id "g1"
                                :transform (format "translate(%s, %s)"
                                                   (- c day) (+ c day))}
                            [tag (assoc attrs
                                   :fill "rgb(255, 0, 255)"
                                   :stroke "rgb(255, 0, 255)")]]
                           [:g {:id "g2"
                                :transform (format "translate(%s, %s)"
                                                   (+ c day) (+ c day))}
                            [tag (assoc attrs
                                   :fill "rgb(255, 255, 0)"
                                   :stroke "rgb(255, 255, 0)")]]]
                          [:rect {:x 0 :y 0
                                  :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :style "filter:url(#main);"}]]
                         (format
                           (str "A shape which has %s points. The number"
                                " of points represents the day of the week"
                                " (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                "\n.\n.\n"
                                "The shattered colour border surrounding the shape, has a"
                                " width which is %s pixels to represent the day of the month."
                                "\n.\n.\n"
                                "To see the code which generated this, see:"
                                " http://bit.ly/be-nice-now-social-media-examples")
                           idx_1_based
                           day)))
        [circle line & polygons] (indexed-days-of-week (week->date 2018 50))]
    (apply gen-fn [:circle {:cx 0 :cy 0 :r r}] circle)
    (apply gen-fn [:line {:x1 (- (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         4))) :y1 0
                          :x2 (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                      4)) :y2 0
                          :stroke-width r
                          :stroke-linecap "round"}]
           line)
    (doseq [[idx_1_based year month day] polygons]
      (gen-fn (polygon/equilateral idx_1_based
                                   r)
              idx_1_based year month day))))

(defn instagram-2018-51
  []
  (let [ceil (fn [n] (int (Math/ceil n)))
        line-segments (fn [{[x0 y0] :start
                            [x4 y4] :end}]
                        (let [x-segment (ceil (/ (- x4 x0) 4))
                              y-segment (ceil (/ (- y4 y0) 4))]
                          {:segments (concat (for [i (range 0 4)]
                                               [(+ (* i x-segment) x0)
                                                (+ (* i y-segment) y0)])
                                             [[x4 y4]])
                           :length (Math/sqrt (+ (* x-segment x-segment)
                                                 (* y-segment y-segment)))}))
        arc-fn (fn [points]
                 (let [{:keys [segments length]} (line-segments points)
                       [x1 y1] (second segments)
                       [x3 y3] (nth segments 3)
                       [x4 y4] (last segments)]
                   (format "L %s %s A %s %s 0 0 1 %s %s L %s %s"
                           x1 y1
                           (ceil length)
                           (ceil length)
                           x3 y3
                           x4 y4)))
        control-padding (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 10))
        control-width-height (- INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                (* 2 control-padding))
        border-control-points (zipmap (pipes/points 1 1 {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                         :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT})
                                      (map (fn [[x y]]
                                             [(+ control-padding
                                                 x)
                                              (+ control-padding
                                                 y)])
                                           (pipes/points 1 1 {:width control-width-height
                                                              :height control-width-height})))
        gen-fn (fn [idx_1_based year month day]
                 (let [control-points (repeatedly idx_1_based
                                                  (fn []
                                                    [(+ (rand-int control-width-height)
                                                        control-padding)
                                                     (+ (rand-int control-width-height)
                                                        control-padding)]))
                       description (format
                                     (str "Generated using %s random points to"
                                          " represent the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                          " Each point is intersected twice, once each by two continuous lines"
                                          " crossing the image."
                                          "\n.\n.\n"
                                          "Since today is %s, the colour scheme is %s"
                                          "\n.\n.\n"
                                          "The shattered colour border surrounding the shape, has a"
                                          " width which is %s pixels to represent the day of the month."
                                          "\n.\n.\n"
                                          "To see the code which generated this, see:"
                                          " http://bit.ly/be-nice-now-social-media-examples")
                                     idx_1_based
                                     (if (even? day)
                                       "even"
                                       "odd")
                                     (if (even? day)
                                       "light"
                                       "dark")
                                     day)
                       line-fn (fn [_dimensions {[x0 y0] :start
                                                 [xn yn] :end}]
                                 (let [points (concat
                                                [(get border-control-points
                                                      (list x0 y0))]
                                                (shuffle control-points)
                                                [(get border-control-points
                                                      (list xn yn))])
                                       [x1 y1] (first points)]
                                   [:path
                                    {:d (format "M %s %s L %s %s %s L %s %s"
                                                x0
                                                y0
                                                x1
                                                y1
                                                (str/join " "
                                                          (map (fn [xy_n xy_n1]
                                                                 (arc-fn {:start xy_n
                                                                          :end xy_n1}))
                                                               (butlast points)
                                                               (rest points)))
                                                xn
                                                yn)
                                     :stroke-linecap "square"
                                     :stroke-linejoin "miter"}]))
                       [colour shatter-fn background] (if (even? day)
                                                        [month shatter/dark "white"]
                                                        [(- 255 month) shatter/light "black"])
                       {:keys [style path-fn]} (svg/multi-stroke [{:width 50
                                                                   :colour {:r colour
                                                                            :g colour
                                                                            :b colour}}])
                       [hiccup-svg] (pipes/swatches
                                      1 1
                                      {:line-fn (fn [& args]
                                                  (path-fn (apply line-fn args)))
                                       :style style
                                       :grid-size (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                          2))})]
                   (render [year month day]
                           [:svg
                            {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                             :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                            [:defs {}]
                            [:rect {:fill background
                                    :x 0 :y 0
                                    :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                    :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]
                            (shatter-fn hiccup-svg day)]
                           description)))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 51))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2018-52
  []
  (let [colours (->> (concat ink.cc/web-safe-colors
                             (vals ink.lindsay/swatch)
                             (vals ink.x11/swatch))
                     (map ink.color/coerce)
                     (map (fn [^Color c]
                            {:a (float (/ (.getAlpha c)
                                          255))
                             :r (.getRed c)
                             :g (.getGreen c)
                             :b (.getBlue c)})))
        noise-swatch-fn (trace/fnp noise-swatch [palette height-width]
                          (let [noise-swatch-img (img/new-image height-width height-width)
                                pixels (img/get-pixels noise-swatch-img)
                                noise-swatch (patterns/tmp-resource)
                                palette-count (count palette)]
                            (dotimes [i (* height-width height-width)]
                              (aset pixels i
                                    (.getRGB ^Color (ink.color/coerce (nth palette (rand-int palette-count))))))
                            (img/set-pixels noise-swatch-img pixels)
                            (img/write noise-swatch-img
                                       noise-swatch
                                       "png"
                                       :quality 1.0)
                            noise-swatch))
        starting-dimensions (->> (map (partial bit-shift-left 1)
                                      (range))
                                 (take-while (partial > INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT))
                                 reverse)
        gen-fn (fn [idx_1_based year month day]
                 (let [starting-dimension (->> starting-dimensions
                                               (take (inc day))
                                               last)
                       {:keys [to-delete
                               hiccup-svg]}
                       (loop [accum [:svg {:width starting-dimension
                                           :height starting-dimension}
                                     [:defs {}]
                                     [:rect {:width starting-dimension
                                             :height starting-dimension
                                             :style "fill:rgb(0,0,0)"}]]
                              to-delete []
                              previous-colours {:r 255 :g 255 :b 255}
                              square-dimension starting-dimension]
                         (log/info "Accumulating..." {:to-delete to-delete
                                                      :previous-colours previous-colours
                                                      :square-dimension square-dimension})
                         (if (< (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                   2)
                                square-dimension)
                           {:to-delete to-delete
                            :hiccup-svg accum}
                           (let [channel-swatches (into {}
                                                        (for [[channel v] previous-colours]
                                                          (let [_ (log/debug "Making swatch...")
                                                                clamped-colours (filter (fn [c]
                                                                                          (<= (get c channel) v))
                                                                                        colours)
                                                                noise-swatch (noise-swatch-fn clamped-colours
                                                                                              square-dimension)
                                                                cluster-data (->> (graphs/k-means-png-data
                                                                                    noise-swatch
                                                                                    (min square-dimension
                                                                                         idx_1_based))
                                                                                  (sort-by second)
                                                                                  reverse)]
                                                            (log/debug "...swatch made!")
                                                            [channel
                                                             {:to-delete noise-swatch
                                                              :cluster-data cluster-data
                                                              :colour (get-in (vec cluster-data) [0 0 channel])
                                                              :swatch (graphs/bar-overlay
                                                                        [:svg
                                                                         {:height square-dimension
                                                                          :width square-dimension}
                                                                         [:defs {}]
                                                                         [:image {:height square-dimension
                                                                                  :width square-dimension
                                                                                  :xlink:href noise-swatch
                                                                                  :x 0 :y 0}]]
                                                                        (graphs/bar
                                                                          {:height square-dimension
                                                                           :width square-dimension}
                                                                          cluster-data)
                                                                        {:opacity 1.0})}])))]
                             (recur
                               (tile/grid
                                 (cons accum
                                       [(get-in channel-swatches [:r :swatch])
                                        (get-in channel-swatches [:b :swatch])
                                        (get-in channel-swatches [:g :swatch])])
                                 2 2
                                 {:transform-fn tile/transform-rotate})
                               (concat to-delete (map :to-delete (vals channel-swatches)))
                               {:r (get-in channel-swatches [:r :colour])
                                :g (get-in channel-swatches [:g :colour])
                                :b (get-in channel-swatches [:b :colour])}
                               (* 2 square-dimension)))))]
                   (render [year month day]
                           hiccup-svg
                           (format
                             (str "Generated using %s (day of the month) steps. Each step consists of"
                                  " first using the image created by the previous step, and then"
                                  " making three new images: one for each channel in the digital"
                                  " colour spectrum (ie, red, green, and blue)."
                                  "\n.\n.\n"
                                  "Steps are linked together via sequential powers, similar to"
                                  " the Fibonnaci sequence. However, unlike the classic nautilus shell"
                                  " example, each step is able to rotate the previous image at will."
                                  "\n.\n.\n"
                                  "https://en.wikipedia.org/wiki/Fibonacci_number"
                                  " https://en.wikipedia.org/wiki/Power_of_two"
                                  " https://en.wikipedia.org/wiki/Golden_spiral"
                                  "\n.\n.\n"
                                  "Each step also overlays a the most common %s colours over"
                                  " the given tile. %s is"
                                  " the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                  "\n.\n.\n"
                                  "We used a similar method for making the overlayed colours back"
                                  " in https://www.instagram.com/p/Bq7nzd3hYzg/"
                                  "\n.\n.\n"
                                  "To see the code which generated this, see:"
                                  " http://bit.ly/be-nice-now-social-media-examples")
                             day
                             idx_1_based
                             idx_1_based))
                   (doseq [f to-delete]
                     (log/debugf "deleting %s. Result: %s"
                                 f
                                 (io/delete-file f)))))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2018 52))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2019-0
  []
  (let [tile-height (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 4)
        tile-width (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 20)
        shape-wd (Math/sqrt (/ (* (/ tile-height 2)
                                  (/ tile-height 2))
                               2))
        gen-fn (fn [idx_1_based year month day
                    [gradient-start gradient-end]
                    [fill-start fill-end]]
                 (let [xn 20
                       shape (layer/rotate
                               [:svg {:width shape-wd :height shape-wd}
                                [:defs {}]
                                (polygon/equilateral (+ 2 idx_1_based)
                                                     (/ shape-wd 2)
                                                     {:fill gradient-end})
                                (polygon/equilateral (+ 2 idx_1_based)
                                                     (/ shape-wd 2.1)
                                                     {:fill gradient-start})]
                               (float (/ 360 35))
                               (* 6 idx_1_based))
                       gradients (fn [n]
                                   (concat
                                     (for [[idx shape-idx] (map list
                                                                (reverse (range 0 n))
                                                                (range 0 n))]
                                       [:svg {:width tile-width
                                              :height tile-height}
                                        [:defs {}
                                         (svg/->def shape "s")
                                         [:linearGradient {:id "gradient"}
                                          [:stop {:style (str "stop-color:" gradient-start)
                                                  :offset "0%"}]
                                          [:stop {:style (str "stop-color:" gradient-end)
                                                  :offset "100%"}]]]
                                        [:rect {:x (- (* idx
                                                         (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                            n)))
                                                :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                :fill "url(#gradient)"}]
                                        (svg/use "s" {:x (- (* (dec shape-idx)
                                                               (/ tile-height n)))})])
                                     (when (> xn n)
                                       (for [i (reverse (range 0 INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                               (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT (- xn n))))]
                                         [:svg {:width tile-width
                                                :height tile-height}
                                          [:defs {}
                                           [:linearGradient {:id "gradient"}
                                            [:stop {:style (str "stop-color:" fill-start)
                                                    :offset "0%"}]
                                            [:stop {:style (str "stop-color:" fill-end)
                                                    :offset "100%"}]]]
                                          [:rect {:x (- i)
                                                  :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                  :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                                  :fill "url(#gradient)"}]]))))]
                   (log/info {:edges (+ 2 idx_1_based)
                              :shape (svg/dimensions shape)})
                   (render [year month day]
                           (tile/grid
                             (concat
                               (gradients 20)
                               (gradients 19)
                               (gradients month)
                               (gradients day))
                             xn 4)
                           (format
                             (str "The first row of colours is filled 20, the second is filled 19..."
                                  " for, well...our curent year (honestly, we wrote 2018 first...)."
                                  " The third and fourth rows are 1 (month) and %s (day)."
                                  "\n.\n.\n"
                                  "The tiles are filled with two things: (1) a gradient which starts at"
                                  " %s, and ends at %s. (2) a shape which is rotated %s/7 around a circle,"
                                  " and has %s sides. %s and %s (%s + 2) is representative of"
                                  " the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.). The"
                                  " background is also a gradient. It starts at %s, and ends at %s."
                                  "\n.\n.\n"
                                  "To see the code which generated this, see:"
                                  " http://bit.ly/be-nice-now-social-media-examples")
                             day
                             gradient-start gradient-end
                             idx_1_based
                             (+ 2 idx_1_based)
                             idx_1_based
                             (+ 2 idx_1_based)
                             idx_1_based
                             fill-start fill-end))))]
    (doseq [[[idx_1_based year month day] gradient fill]
            (map list
                 (indexed-days-of-week (week->date 2019 0))
                 [["orange" "red"]
                  ["purple" "blue"]
                  ["green" "yellow"]
                  ["orange" "yellow"]
                  ["red" "orange"]
                  ["blue" "purple"]
                  ["yellow" "green"]]
                 [["blue" "cyan"]
                  ["purple" "magenta"]
                  ["yellow" "cyan"]
                  ["cyan" "magenta"]
                  ["cyan" "blue"]
                  ["magenta" "purple"]
                  ["cyan" "yellow"]
                  ["magenta" "cyan"]])]
      (gen-fn idx_1_based year month day gradient fill))))

(defn instagram-2019-1
  []
  (let [cross-hatch-background (fn [n stroke]
                                 (let [points-x (repeatedly n #(rand-int
                                                                 INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT))
                                       points-y (repeatedly n #(rand-int
                                                                 INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT))
                                       points (map list
                                                   points-x
                                                   points-y)
                                       line-fn (fn [[x0 y0]]
                                                 ; y = mx + b = -1x + b
                                                 ; x0 + y0 = b
                                                 ;; y1 = -x + b = b - x
                                                 ;; y = -x2 + b => -(y - b) = x2 => b - y
                                                 (let [padding -5
                                                       xy (- (+ x0 y0)
                                                             padding)]
                                                   [:line {:x1 padding :y1 xy
                                                           :x2 xy :y2 padding
                                                           :stroke-width 1
                                                           :stroke stroke}]))]
                                   (utils/veccat
                                     [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                            :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                                      [:defs {}]]
                                     (mapv line-fn points))))
        rand-cube (fn [dimension]
                    (let [center (int (/ dimension 2))
                          top (rand-int center)
                          bottom (+ (rand-int center)
                                    center)
                          format-str (str/join " " (repeat 4 "%s,%s"))]
                      [:svg {:width dimension :height dimension}
                       [:defs {}]
                       [:polygon {:points (format format-str
                                                  center 0
                                                  dimension top
                                                  center center
                                                  0 top)
                                  :style "stroke-width:2;stroke:cadetblue;fill:none;"}]
                       [:polygon {:points (format format-str
                                                  center dimension
                                                  center center
                                                  dimension top
                                                  dimension bottom)
                                  :style "stroke-width:4;stroke:darkcyan;fill:none;"}]
                       [:polygon {:points (format format-str
                                                  center dimension
                                                  center center
                                                  0 top
                                                  0 bottom)
                                  :style "stroke-width:8;stroke:lightseagreen;fill:none;"}]]))
        swatch-wd (- (int (Math/sqrt (/ (* (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 2)
                                           (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT 2))
                                        2)))
                     2)
        gen-fn (fn [idx_1_based year month day]
                 (let [shape (layer/infinite
                               (rand-cube swatch-wd)
                               day)
                       center (/ (:width (svg/dimensions shape))
                                 2)
                       gap (- (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                 2)
                              center)
                       maze (tile/grid
                              (pipes/swatches
                                1 1
                                {:grid-size (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                               120)
                                 :style "{stroke:ghostwhite;stroke-width:1;}"})
                              120 120
                              {:pick-fn tile/pick-random
                               :transform-fn tile/transform-rotate})]
                   (render [year month day]
                           [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                            [:defs {}
                             (svg/->def (cross-hatch-background (* day 50) "lightgray")
                                        "background")
                             (svg/->def maze "maze")
                             (svg/->def shape "shape")]
                            [:rect {:fill "whitesmoke"
                                    :x 0 :y 0
                                    :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                    :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]
                            (svg/use "background" {:x 0 :y 0})
                            (svg/use "maze" {:x 0 :y 0})
                            (svg/use "shape" {:x gap :y gap})]
                           (format
                             (str "%s (day) cubes, randomly skewed, infinitely rotated about"
                                  " center."
                                  "\n.\n.\n"
                                  "The background is cross hatched and will get gradually"
                                  " more filled in as the week goes on."
                                  "\n.\n.\n"
                                  "There is also an off-white maze layered on top of the"
                                  " background, just for fun."
                                  "\n.\n.\n"
                                  "To see the code which generated this, see:"
                                  " http://bit.ly/be-nice-now-social-media-examples")
                             day))))]
    (doseq [[idx_1_based year month day]
            (indexed-days-of-week (week->date 2019 1))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2019-2
  []
  (let [line-control-colour "darkslategray"
        line-gradient-colour "mediumaquamarine"
        background-colour "blanchedalmond"
        tile-gen (fn [tile-xy-count tile-lines-count]
                   (let [tile-wh (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         tile-xy-count))
                         tile-padding (int (* tile-wh
                                              (/ tile-xy-count
                                                 (inc tile-xy-count))))
                         gap (int (/ (- tile-wh tile-padding)
                                     2))
                         tile-control-lines (utils/veccat
                                              [:g]
                                              (for [[[x1 y1] [x2 y2]]
                                                    (map (fn [exterior-point
                                                              interior-point]
                                                           [exterior-point
                                                            (map (partial + gap)
                                                                 interior-point)])
                                                         (pipes/points 1 1 {:width tile-wh
                                                                            :height tile-wh})
                                                         (pipes/points 1 1 {:width tile-padding
                                                                            :height tile-padding}))]
                                                [:line {:x1 x1 :y1 y1
                                                        :x2 x2 :y2 y2
                                                        :stroke-width 1
                                                        :stroke line-control-colour}]))
                         generate-tile (fn [percentage]
                                         (let [lines-id (gensym "l")
                                               center (int (/ tile-padding
                                                              2))
                                               lines-per-side (/ tile-lines-count 4)
                                               line-gen (fn [x1 y1]
                                                          [:line {:x2 center
                                                                  :y2 center
                                                                  :x1 x1
                                                                  :y1 y1
                                                                  :stroke-width 1
                                                                  :stroke (if (> percentage (rand))
                                                                            line-gradient-colour
                                                                            line-control-colour)}])]
                                           [:svg {:width tile-wh
                                                  :height tile-wh}
                                            [:defs {}
                                             (svg/->def [:svg {:width tile-padding
                                                               :height tile-padding}
                                                         (utils/veccat
                                                           [:g]
                                                           (for [x (repeatedly lines-per-side
                                                                               (partial rand-int tile-padding))]
                                                             (line-gen x 0))
                                                           (for [x (repeatedly lines-per-side
                                                                               (partial rand-int tile-padding))]
                                                             (line-gen x tile-padding))
                                                           (for [y (repeatedly lines-per-side
                                                                               (partial rand-int tile-padding))]
                                                             (line-gen 0 y))
                                                           (for [y (repeatedly lines-per-side
                                                                               (partial rand-int tile-padding))]
                                                             (line-gen tile-padding y)))]
                                                        lines-id)]
                                            tile-control-lines
                                            (svg/use lines-id
                                                     {:x gap :y gap})]))
                         generate-row-of-tiles (fn []
                                                 (for [i (range tile-xy-count)]
                                                   (generate-tile (/ (inc i) tile-xy-count))))
                         tiles (apply concat
                                      (repeatedly tile-xy-count generate-row-of-tiles))]
                     (tile/grid
                       tiles
                       tile-xy-count tile-xy-count)))
        gen-fn (fn [idx_1_based year month day]
                 (render [year month day]
                         [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                          [:defs {}
                           (svg/->def (tile-gen idx_1_based (* day day))
                                      "tiles")]
                          [:rect {:fill background-colour
                                  :x 0 :y 0
                                  :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]
                          (svg/use "tiles" {:x 0 :y 0})]
                         (format
                           (str "Playing around with gradients this week. There are %s by %s tiles, where"
                                " %s represents the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                                "\n.\n.\n"
                                "Each tile has %s * %s lines for the day of the month."
                                " Each line is randomly assigned a coordinate along a square,"
                                " then drawn in toward the center."
                                " The colour of each line is randomly chosen,"
                                " with the probability of the line being dark decreasing as"
                                " the tile moves toward the right. Due to this, it appears that there is a gradient"
                                " effect."
                                "\n.\n.\n"
                                "To see the code which generated this, see:"
                                " http://bit.ly/be-nice-now-social-media-examples")
                           idx_1_based idx_1_based idx_1_based
                           day day)))]
    (doseq [[idx_1_based year month day]
            (indexed-days-of-week (week->date 2019 2))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2019-3
  []
  (let [background-colour "rgb(250,250,250)"
        padding (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                   120)
        gradient-panel--height (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  6)
        gradient-panel--height--padding (- gradient-panel--height
                                           (* padding 2))
        gradient-panel--width--padding (- INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                          (* padding 2))
        tile-y-count 3
        tile-wh (int (/ gradient-panel--height--padding
                        tile-y-count))
        tile-x-count (int (/ gradient-panel--width--padding
                             tile-wh))
        tile-center (float (/ tile-wh
                              2))
        tile-padding (float (* tile-wh
                               (/ 1
                                  7)))
        half-tile-padding (float (/ tile-padding
                                    2))
        with-padding (fn [src]
                       (let [id (gensym "wp")]
                         [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                :height gradient-panel--height}
                          [:defs {}
                           (svg/->def src id)]
                          (svg/use id {:x padding :y padding})]))
        cross-hatch-points (fn [n width]
                             (->> (repeatedly n rand)
                                  (map (fn [seed]
                                         ; Quarter of a Circle
                                         ;; y(x) = width * (-sqrt(- x^2 + 1) + 1)
                                         (* width
                                            (inc (- (Math/sqrt
                                                      (- 1 (* seed seed))))))))
                                  (map #(Math/round %))))
        vert-hatch-gradient (fn [n stroke]
                              (let [points (cross-hatch-points n gradient-panel--width--padding)
                                    line-fn (fn [point]
                                              [:line {:x1 point :y1 0
                                                      :x2 point :y2 gradient-panel--height--padding
                                                      :stroke-width 1
                                                      :stroke stroke}])]
                                (utils/veccat
                                  [:svg {:width gradient-panel--width--padding
                                         :height gradient-panel--height--padding}
                                   [:defs {}]]
                                  (mapv line-fn points))))
        cross-hatch-gradient (fn [n stroke]
                               (let [id (gensym "chg")
                                     half-height (Math/round
                                                   (float (/ gradient-panel--height--padding
                                                             2)))
                                     overflow-width (+ gradient-panel--width--padding
                                                       gradient-panel--height--padding)
                                     points (cross-hatch-points n overflow-width)
                                     line-fn (fn [point]
                                               (let [padding -5
                                                     ; y = mx + b
                                                     ;; m = -1
                                                     ;; x0, y1 = padding
                                                     ;; half-height = - point + b
                                                     ;; => b = half-height + point
                                                     ;; => y0, x1 = b - padding
                                                     y0x1 (- (+ half-height
                                                                point)
                                                             padding)]
                                                 [:line {:x1 padding :y1 y0x1
                                                         :x2 y0x1 :y2 padding
                                                         :stroke-width 1
                                                         :stroke stroke}]))]
                                 [:svg {:width gradient-panel--width--padding
                                        :height gradient-panel--height--padding}
                                  [:defs {}
                                   (svg/->def (utils/veccat
                                                [:svg {:width overflow-width
                                                       :height gradient-panel--height--padding}
                                                 [:defs {}]]
                                                (mapv line-fn points))
                                              id)]
                                  (svg/use id {:x (- half-height)})]))
        tile-grid-gen (fn [generate-tile]
                        (let [generate-row-of-tiles (fn []
                                                      (for [i (range tile-x-count)]
                                                        (generate-tile (/ (inc i) tile-x-count))))
                              tiles (apply concat
                                           (repeatedly tile-y-count generate-row-of-tiles))]
                          (tile/grid
                            tiles
                            tile-x-count tile-y-count
                            {:transform-fn tile/pi-rotate})))
        tile-gen (fn [colour]
                   (let [max-tile-lines-count 150
                         inner-tile (- tile-wh tile-padding)
                         gap (int (/ (- tile-wh inner-tile)
                                     2))
                         center (int (/ inner-tile
                                        2))
                         max-lines-per-side (/ max-tile-lines-count 4)
                         line-gen (fn [x1 y1]
                                    [:line {:x2 center
                                            :y2 center
                                            :x1 x1
                                            :y1 y1
                                            :stroke-width 1
                                            :stroke colour}])]
                     (tile-grid-gen
                       (fn [percentage]
                         (let [lines-id (gensym "l")
                               lines-per-side (Math/round
                                                (float (* (- 1 percentage)
                                                          max-lines-per-side)))]
                           [:svg {:width tile-wh
                                  :height tile-wh}
                            [:defs {}
                             (svg/->def [:svg {:width inner-tile
                                               :height inner-tile}
                                         (utils/veccat
                                           [:g]
                                           (for [x (repeatedly lines-per-side
                                                               (partial rand-int inner-tile))]
                                             (line-gen x 0))
                                           (for [x (repeatedly lines-per-side
                                                               (partial rand-int inner-tile))]
                                             (line-gen x inner-tile))
                                           (for [y (repeatedly lines-per-side
                                                               (partial rand-int inner-tile))]
                                             (line-gen 0 y))
                                           (for [y (repeatedly lines-per-side
                                                               (partial rand-int inner-tile))]
                                             (line-gen inner-tile y)))]
                                        lines-id)]
                            (svg/use lines-id
                                     {:x gap :y gap})])))))
        control-tile-gen (fn [colour]
                           (let [max-tile-lines-count 80
                                 max-lines-per-side (/ max-tile-lines-count 4)

                                 line-gen (fn [x1 y1]
                                            [:line {:x2 tile-center
                                                    :y2 tile-center
                                                    :x1 x1
                                                    :y1 y1
                                                    :stroke-width 1
                                                    :stroke colour}])
                                 line-segment (* 2 tile-padding)]
                             (tile-grid-gen
                               (fn [percentage]
                                 (let [point-gen (fn []
                                                   (let [lines-per-side (Math/round
                                                                          (float (* (- 1 percentage)
                                                                                    max-lines-per-side)))]
                                                     (->> (partial rand-int line-segment)
                                                          (repeatedly lines-per-side)
                                                          (map (partial + half-tile-padding)))))]
                                   [:svg {:width tile-wh
                                          :height tile-wh}
                                    [:defs {}]
                                    (utils/veccat
                                      [:g]
                                      (for [x (point-gen)]
                                        (line-gen x 0))
                                      (for [x (point-gen)]
                                        (line-gen x tile-wh))
                                      (for [y (point-gen)]
                                        (line-gen 0 y))
                                      (for [y (point-gen)]
                                        (line-gen tile-wh y)))])))))
        triangle-tile-gen (fn [colour]
                            (let [triangle-id (gensym "t")
                                  triangle-def (svg/->def [:svg {:width tile-wh
                                                                 :height tile-wh}
                                                           [:defs {}]
                                                           (let [corner (+ half-tile-padding
                                                                           (* half-tile-padding (Math/sqrt 2)))]
                                                             [:polygon {:points (format "%s,%s %s,%s %s,%s"
                                                                                        half-tile-padding
                                                                                        corner

                                                                                        half-tile-padding
                                                                                        (- tile-wh corner)

                                                                                        (- tile-center half-tile-padding)
                                                                                        tile-center)
                                                                        :style (format "fill:%s"
                                                                                       colour)}])]
                                                          triangle-id)
                                  triangle-tiles (->> (for [triangle-count (range 5)]
                                                        (utils/veccat
                                                          [:svg {:width tile-wh
                                                                 :height tile-wh}
                                                           [:defs {} triangle-def]]
                                                          (for [rotation (->> (range 0 360 90)
                                                                              (take triangle-count))]
                                                            (svg/use triangle-id
                                                                     {:transform (format "rotate(%s %s %s)"
                                                                                         rotation
                                                                                         tile-center
                                                                                         tile-center)}))))
                                                      reverse
                                                      vec)
                                  triangle-weights (fn [percentage]
                                                     (let [distances (map #(Math/abs (float (- percentage %)))
                                                                          (range 0 1 (/ (count triangle-tiles))))
                                                           skew-for-closest (->> distances
                                                                                 (map (partial - 1))
                                                                                 (map (fn [x]
                                                                                        (* x
                                                                                           (Math/pow 2
                                                                                                     (* 5 x))))))
                                                           normalize-by (apply + skew-for-closest)
                                                           weights (map #(/ % normalize-by)
                                                                        skew-for-closest)]
                                                       weights))
                                  triangle--percentage->idx-fn (memoize
                                                                 (fn [percentage]
                                                                   (transform/bin-idx (triangle-weights percentage))))]
                              (tile-grid-gen
                                (fn [percentage]
                                  (triangle-tiles ((triangle--percentage->idx-fn percentage)
                                                    (rand)))))))
        star-tile-gen (fn [colour]
                        (let [star-tile-empty [:svg {:width tile-wh
                                                     :height tile-wh}
                                               [:defs {}]
                                               [:line {:x2 tile-center
                                                       :y2 0
                                                       :x1 tile-center
                                                       :y1 tile-wh
                                                       :stroke-width tile-padding
                                                       :stroke colour}]
                                               [:line {:x2 0
                                                       :y2 tile-center
                                                       :x1 tile-wh
                                                       :y1 tile-center
                                                       :stroke-width tile-padding
                                                       :stroke colour}]]
                              star-tile-filled (let [h0v0 (- tile-center half-tile-padding)
                                                     h1v1 (+ tile-center half-tile-padding)
                                                     Q (fn [& args]
                                                         (format "Q %s"
                                                                 (str/join " " (flatten args))))
                                                     m (fn [h-or-v & [direction]]
                                                         (format "%s %s"
                                                                 (name h-or-v)
                                                                 ((or direction identity)
                                                                   tile-padding)))
                                                     svg [:svg {:width tile-wh
                                                                :height tile-wh}
                                                          [:defs {}]
                                                          [:path {:fill colour
                                                                  :d (format "M 0 %s %s"
                                                                             h0v0
                                                                             (str/join " " [(Q [h0v0 h0v0] [h0v0 0])
                                                                                            (m :h)
                                                                                            (Q [h1v1 h0v0] [tile-wh h0v0])
                                                                                            (m :v)
                                                                                            (Q [h1v1 h1v1] [h1v1 tile-wh])
                                                                                            (m :h -)
                                                                                            (Q [h0v0 h1v1] [0 h1v1])]))}]]]
                                                 ;;    | c |
                                                 ;;   v0 e v1
                                                 ;;    | n |
                                                 ;;h0 - -t- - - ->
                                                 ;; c-e-n-t-e-r- ->
                                                 ;;h1 - -e- - - ->
                                                 ;;    | r |
                                                 ;;    v   v
                                                 svg)]
                          (tile-grid-gen
                            (fn [percentage]
                              (if (> percentage (rand))
                                star-tile-empty
                                star-tile-filled)))))
        hatch-line-count 1000
        order-of-panels [tile-gen
                         (partial vert-hatch-gradient hatch-line-count)
                         triangle-tile-gen
                         (partial cross-hatch-gradient hatch-line-count)
                         star-tile-gen
                         control-tile-gen]
        gen-fn (fn [idx_1_based year month day src-gens colours]
                 (render [year month day]
                         (let [ids (repeatedly (count src-gens)
                                               gensym)]
                           (utils/veccat
                             [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                    :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                              (utils/veccat
                                [:defs {}]
                                (for [[id src-gen colour] (map list
                                                               ids
                                                               src-gens
                                                               colours)]
                                  (svg/->def (with-padding
                                               (src-gen colour)) id)))
                              [:rect {:fill background-colour
                                      :x 0 :y 0
                                      :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                      :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]]
                             (for [[y id] (map list
                                               (range 0 INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT (count src-gens)))
                                               ids)]
                               (svg/use id {:x 0 :y y}))))
                         "Gradients."))
        seqs (map list
                  (indexed-days-of-week (week->date 2019 3))
                  (concat [order-of-panels]
                          (for [src-gen order-of-panels]
                            (repeat 6 src-gen)))
                  [["rgb(102,255,204)" "rgb(77,255,225)" "rgb(51,255,221)"
                    "rgb(25,255,217)" "rgb(0,255,213)" "rgb(0,230,191)"]
                   ["rgb(255,255,77)" "rgb(255,221,51)" "rgb(255,217,25)"
                    "rgb(255,213,0)" "rgb(230,191,0)" "rgb(230,170,0)"]
                   ["rgb(255,77,106)" "rgb(255,51,85)" "rgb(255,25,64)"
                    "rgb(255,0,43)" "rgb(230,0,38)" "rgb(204,0,34)"]
                   ["rgb(229,102,255)" "rgb(196,77,255)" "rgb(153,51,255)"
                    "rgb(102,25,255)" "rgb(43,0,255)" "rgb(0,0,230)"]
                   ["rgb(166,255,77)" "rgb(119,255,51)" "rgb(64,255,25)"
                    "rgb(0,255,0)" "rgb(43,0,255)" "rgb(0,230,38)"]
                   ["rgb(231,227,208)"
                    "rgb(35,115,62)"
                    "rgb(159,14,17)"
                    "rgb(247,205,38)"
                    "rgb(32,42,54)"
                    "rgb(231,227,208)"]
                   ["#1DACE8"
                    "#1C366B"
                    "#F24D29"
                    "#E5C4A1"
                    "#C4CFD0"
                    "#F8DF4F"]])]
    (doseq [[[idx_1_based year month day]
             src-gens
             colours]
            seqs]
      (gen-fn idx_1_based year month day src-gens colours))))

(defn instagram-2019-4
  []
  (let [swatch-dim (int (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                           3))
        radius (float (/ swatch-dim
                         10))
        cross-hatch-points (fn [n width]
                             (->> (repeatedly n rand)
                                  (map (fn [seed]
                                         ; Quarter of a Circle
                                         ;; y(x) = width * (-sqrt(- x^2 + 1) + 1)
                                         (* width
                                            (inc (- (Math/sqrt
                                                      (- 1 (* seed seed))))))))
                                  (map #(Math/round %))))
        vert-hatches (fn [n stroke]
                       (let [points (cross-hatch-points n (* 2 radius))
                             line-fn (fn [point]
                                       [:line {:x1 point :y1 0
                                               :x2 point :y2 (* 2 radius)
                                               :stroke-width 1
                                               :stroke stroke}])]
                         (mapv line-fn points)))
        center (fn [{:keys [width height] :as dims} src]
                 (let [{w :width
                        h :height} (svg/dimensions src)
                       gap-width (float (/ (- width w)
                                           2))
                       gap-height (float (/ (- height h)
                                            2))
                       id (gensym "center")]
                   [:svg dims
                    [:defs {}
                     (svg/->def src id)]
                    (svg/use id {:x gap-width :y gap-height})]))
        gen-fn (fn [idx_1_based year month day]
                 (let [shape (shatter/dark
                               [:svg {:width (* 2 radius)
                                      :height (* 2 radius)}
                                [:defs {}
                                 [:clipPath {:id "c"}
                                  (polygon/equilateral
                                    (dec day)
                                    radius)]]
                                (utils/veccat
                                  [:g {:clip-path "url(#c)"}]
                                  (vert-hatches 100
                                                "black"))]
                               1)]
                   (render [year month day]
                           (tile/grid
                             (->> (concat [shape]
                                          (for [i (range 0 idx_1_based)]
                                            (layer/spiral
                                              shape
                                              (+ 4 i)
                                              (+ 4 i))))
                                  (map (partial center
                                                {:width swatch-dim
                                                 :height swatch-dim})))

                             (inc idx_1_based)
                             (inc idx_1_based))
                           "Gradients.")))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2019 4))]
      (gen-fn idx_1_based year month day))))

(defn instagram-2019-5
  []
  (let [center (fn [{:keys [width height] :as dims} src]
                 (let [{w :width
                        h :height} (svg/dimensions src)
                       gap-width (float (/ (- width w)
                                           2))
                       gap-height (float (/ (- height h)
                                            2))
                       id (gensym "center")]
                   [:svg dims
                    [:defs {}
                     (svg/->def src id)]
                    (svg/use id {:x gap-width :y gap-height})]))
        polygon--edges--k-min 1
        polygon--edges--k-max 3
        gen-fn (fn [idx_1_based year month day
                    [colour--background
                     colour--shape-fill
                     colour--circle-stroke
                     colour--shape-stroke]]
                 (let [polygon--k (+ polygon--edges--k-min
                                     (mod day (inc (- polygon--edges--k-max
                                                      polygon--edges--k-min))))
                       polygon-edges (inc (* 2 polygon--k))
                       swatch-dim (-> (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         day)
                                      float
                                      Math/round
                                      int)
                       alternate-rotate-fn (partial
                                             tile/transform-rotate
                                             (if (even? day)
                                               (fn [_src [x _y] _el]
                                                 (if (even? x)
                                                   0
                                                   180))
                                               (fn [_src [_x y] _el]
                                                 (if (even? y)
                                                   0
                                                   180))))
                       shape-stroke-width 1
                       shape-style (format "fill:%s;stroke:%s;stroke-width:%s"
                                           colour--shape-fill
                                           colour--shape-stroke
                                           shape-stroke-width)
                       shapes (->> (range swatch-dim
                                          0
                                          (int (/ (- swatch-dim)
                                                  (inc idx_1_based))))
                                   reverse
                                   rest
                                   (map (fn [dim]
                                          [:svg {:width dim
                                                 :height dim}
                                           [:defs {}]
                                           (polygon/equilateral
                                             polygon-edges
                                             (- (float (/ dim
                                                          2))
                                                shape-stroke-width)
                                             {:style shape-style})]))
                                   reverse
                                   (map (partial center {:width swatch-dim
                                                         :height swatch-dim}))
                                   (utils/veccat
                                     [:svg {:width swatch-dim
                                            :height swatch-dim}
                                      [:defs {}]]))
                       circle-radius (float (/ (* swatch-dim
                                                  (- day
                                                     (* 2 (inc polygon--k))))
                                               2))]
                   (render [year month day]
                           [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                  :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                            [:defs {}
                             (svg/->def (tile/grid
                                          [shapes]
                                          day
                                          day
                                          {:transform-fn alternate-rotate-fn})
                                        "tiles")]
                            [:rect {:fill colour--background
                                    :x 0 :y 0
                                    :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                    :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]
                            (svg/use "tiles" {})
                            [:circle {:cx (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                             2)
                                      :cy (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                             2) :r
                                      circle-radius
                                      :style (format "fill:%s;stroke:%s;stroke-width:%s"
                                                     colour--background
                                                     colour--circle-stroke
                                                     10)}]]
                           (format (str "%s by %s tiles for the day of the month."
                                        " The circle in the center has a border of tiles"
                                        " which relates to the number of edges in the polygons"
                                        " in the tiles."
                                        "\n.\n.\n"
                                        "Each tile has %s polygon(s) in it, nested, to represent"
                                        " the day of the week."
                                        "\n.\n.\n"
                                        "Colours are lifted from pop culture comics.")
                                   day day
                                   idx_1_based))))
        colours (->> poke-palettes
                     (shuffle)
                     (take 7)
                     (map (comp (partial take 4) rest))
                     (map (fn [xs]
                            (map (fn [[_ {:keys [r g b]} _]]
                                   (format "rgb(%s,%s,%s)"
                                           r g b))
                                 xs))))]
    (doseq [[[idx_1_based year month day] colours]
            (map list
                 (indexed-days-of-week (week->date 2019 5))
                 colours)]
      (gen-fn idx_1_based year month day colours))))

(defn instagram-2019-6
  []
  ;; colours
  ;; max(tiles day of month, 20[19]) + mod(max(day, 20)) [ie, max then divisible by 4]
  ;;; contents:
  ;;; pipes
  ;;;; multi stroke based on colour palette
  ;;;; multi stroke based on reversed colour palette
  (let [pipes-swatches (fn [dim [background & colours]]
                         (let [grid-size (-> (/ dim
                                                2)
                                             float
                                             Math/round)
                               {:keys [style path-fn]} (svg/multi-stroke
                                                         (map-indexed (fn [idx colour]
                                                                        (let [line-width (int (* (inc idx)
                                                                                                 (/ grid-size
                                                                                                    (count colours))))]
                                                                          {:width line-width
                                                                           :colour colour}))
                                                                      colours))]
                           (for [swatch (pipes/swatches
                                          1 1
                                          {:line-fn (fn [& args]
                                                      (path-fn (apply svg/quadratic args)))
                                           :style style
                                           :grid-size grid-size})]
                             (let [id (gensym "p")
                                   wd (:height (svg/dimensions swatch))]
                               [:svg {:width wd
                                      :height wd}
                                [:defs {}
                                 (svg/->def swatch id)]
                                [:rect {:x 0 :y 0
                                        :height wd
                                        :width wd
                                        :style (format "fill:rgb(%s,%s,%s);"
                                                       (:r background)
                                                       (:g background)
                                                       (:b background))}]
                                (svg/use id {})]))))
        tiles-row (fn [filled-swatches empty-swatches fill-n row-n]
                    (assert (> row-n fill-n))
                    (let [filled-swatches (cycle filled-swatches)
                          empty-swatches (cycle empty-swatches)]
                      (concat
                        (map (partial nth filled-swatches)
                             (range fill-n))
                        (map (partial nth empty-swatches)
                             (range (- row-n
                                       fill-n))))))
        gen-fn (fn [idx_1_based year month day
                    palette]
                 (let [tiles-n (+ (max day 20)
                                  (- 4
                                     (mod (max day 20) 4)))
                       swatch-dim (-> (/ INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         tiles-n)
                                      float
                                      Math/round)
                       filled-swatches (pipes-swatches swatch-dim palette)
                       empty-swatches (pipes-swatches swatch-dim (reverse palette))
                       tiles-row (partial tiles-row filled-swatches empty-swatches)]
                   (render [year month day]
                           (tile/grid
                             (concat
                               (tiles-row 20 tiles-n)
                               (tiles-row 19 tiles-n)
                               (tiles-row month tiles-n)
                               (tiles-row day tiles-n))
                             tiles-n tiles-n
                             {:transform-fn tile/transform-rotate})
                           (format (str "%s by %s tiles for the day of the month."
                                        " The circle in the center has a border of tiles"
                                        " which relates to the number of edges in the polygons"
                                        " in the tiles."
                                        "\n.\n.\n"
                                        "Each tile has %s polygon(s) in it, nested, to represent"
                                        " the day of the week."
                                        "\n.\n.\n"
                                        "Colours are lifted from pop culture comics.")
                                   day day
                                   idx_1_based))))
        colours (->> poke-palettes
                     (shuffle)
                     (take 7)
                     (map (fn [xs]
                            (map second
                                 xs))))]
    (doseq [[[idx_1_based year month day] colours]
            (map list
                 (indexed-days-of-week (week->date 2019 6))
                 colours)]
      (gen-fn idx_1_based year month day colours))))

(defn instagram-2019-7
  []
  (let [tile-n-panes (->> (range 10)
                          (map (partial bit-shift-left 2))
                          (cons 1)
                          (map (partial / INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT))
                          (map float)
                          (map #(Math/round %)))
        swatch-xn-yn (->> (map (partial / INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT)
                               tile-n-panes)
                          (map #(Math/ceil %))
                          (map int))
        cross-hatch-points (fn [direction n]
                             (->> (repeatedly n rand)
                                  (map (fn [seed]
                                         ; Quarter of a Circle
                                         ;; y(x) = width * (-sqrt(- x^2 + 1) + 1)
                                         (let [x-squared (Math/sqrt
                                                           (- 1 (* seed seed)))]
                                           (* INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                              (if (= :left-to-right direction)
                                                (inc (- x-squared))
                                                x-squared)))))
                                  (map #(Math/round %))))
        vert-hatches (fn [direction n stroke]
                       (let [points (cross-hatch-points direction n)
                             line-fn (fn [point]
                                       [:line {:x1 point :y1 0
                                               :x2 point :y2 INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                               :stroke-width 1
                                               :stroke stroke}])]
                         (mapv line-fn points)))
        center (fn [{:keys [width height] :as dims} src]
                 (let [{w :width
                        h :height} (svg/dimensions src)
                       gap-width (float (/ (- width w)
                                           2))
                       gap-height (float (/ (- height h)
                                            2))
                       id (gensym "center")]
                   [:svg dims
                    [:defs {}
                     (svg/->def src id)]
                    (svg/use id {:x gap-width :y gap-height})]))
        gen-fn (fn [idx_1_based year month day]
                 (let [dominant-colour "black"
                       background "darkcyan"
                       clip-points (fn []
                                     (concat [0]
                                             (->> #(rand-int INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT)
                                                  (repeatedly (dec day))
                                                  (map inc)
                                                  sort)
                                             [INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT]))
                       clip-lines (mapv vector
                                       (clip-points)
                                       (clip-points))
                       clip-polygon-fn (fn [[top-y-start top-y-end] [bottom-y-start bottom-y-end]]
                                         [:polygon {:points (->> [[0 top-y-start]
                                                                  [INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT top-y-end]
                                                                  [INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT bottom-y-end]
                                                                  [0 bottom-y-start]]
                                                                 (map (fn [[x y]]
                                                                        (format "%s,%s"
                                                                                x y)))
                                                                 (str/join " "))}])
                       clip-polygons (mapv clip-polygon-fn
                                           clip-lines
                                           (rest clip-lines))
                       clip-ids (repeatedly day
                                            (comp str gensym (constantly "c")))
                       swatch (utils/veccat
                                [:svg {:width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                       :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}
                                 (utils/veccat
                                   [:defs {}]
                                   (map (fn [id clip-path]
                                          [:clipPath {:id id}
                                           clip-path])
                                        clip-ids
                                        clip-polygons))
                                 [:rect {:fill background
                                         :x 0 :y 0
                                         :height INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT
                                         :width INSTAGRAM-RECOMMENDED-MIN-WIDTH-HEIGHT}]]
                                (map-indexed (fn [idx id]
                                               (utils/veccat
                                                 [:g {:clip-path (format "url(#%s)"
                                                                         id)}]
                                                 (vert-hatches (if (even? idx)
                                                                 :left-to-right
                                                                 :right-to-left)
                                                               100
                                                               dominant-colour)))
                                             clip-ids)
                                (map (fn [[tag attrs]]
                                       [tag (assoc attrs
                                              :style (format "stroke-width:1;stroke:%s;fill:none;"
                                                             dominant-colour))])
                                     clip-polygons))]
                   (render [year month day]
                           swatch
                           #_(tile/grid
                             [swatch]
                             (inc idx_1_based)
                             (inc idx_1_based))
                           "Gradients.")))]
    (doseq [[idx_1_based year month day] (indexed-days-of-week (week->date 2019 7))]
      (gen-fn idx_1_based year month day))))

(comment
  (= [[1 2018 1 1] [2 2018 1 2] [3 2018 1 3] [4 2018 1 4] [5 2018 1 5] [6 2018 1 6] [7 2018 1 7]]
     (indexed-days-of-week (week->date 2018 0)))
  (= [[1 2018 12 31] [2 2019 1 1] [3 2019 1 2] [4 2019 1 3] [5 2019 1 4] [6 2019 1 5] [7 2019 1 6]]
     (indexed-days-of-week (week->date 2018 52)))
  (= [[1 2019 1 7] [2 2019 1 8] [3 2019 1 9] [4 2019 1 10] [5 2019 1 11] [6 2019 1 12] [7 2019 1 13]]
     (indexed-days-of-week (week->date 2019 0)))
  (trace/profile {} (instagram-2018-47))
  (trace/profile {} (instagram-2018-48))
  (trace/profile {} (instagram-2018-49))
  (trace/profile {} (instagram-2018-50))
  (trace/profile {} (instagram-2018-51))
  (trace/profile {} (instagram-2018-52))
  (trace/profile {} (instagram-2019-0))
  (trace/profile {} (instagram-2019-1))
  (trace/profile {} (instagram-2019-2))
  (trace/profile {} (instagram-2019-3))
  (trace/profile {} (instagram-2019-4))
  (trace/profile {} (instagram-2019-5))
  (trace/profile {} (instagram-2019-6))
  (trace/profile {} (instagram-2019-7)))
