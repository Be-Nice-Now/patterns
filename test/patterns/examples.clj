(ns patterns.examples
  (:require [clojure.test :refer :all]
            [patterns.core :as patterns]
            [patterns.tile :as tile]
            [patterns.utils.svg :as svg]
            [patterns.pipes :as pipes]
            [patterns.utils.paths :as utils.paths]))

(defn instagram-2018-47
  []
  (doseq [[idx_1_based day] (map list
                                 (range 1 8)
                                 (range 26 (+ 26 7)))]
    (let [filename (format "./doc/social_media/2018-11-%s--0"
                           day)
          pipe-endpoints (inc (rand-int 3))
          line-fn (if (= 1 pipe-endpoints)
                    svg/quadratic
                    (partial utils.paths/single-bend-line-fn (* idx_1_based idx_1_based)))
          grid-size (int (/ 1080 day pipe-endpoints))
          description (format
                        (str "Generated using %s by %s tiles to represent the day of the month."
                             " Each tile is generated by rotating a pipe pattern. In this image"
                             " each pipe tile has %s endpoints (chosen at random), meaning that"
                             " the tile matches up to tiles around it via %s points on each edge."
                             " In this way, pipes seem to continue seamlessly through the image."
                             "\n\n"
                             "Each line which connects two endpoints, has %s colours to"
                             " represent the day of the week (ie, 1 for Monday, 2 for Tuesday, etc.)."
                             " Each colour is based on the grayscale."
                             "\n\n"
                             "To see the code which generated this, see:"
                             " http://bit.ly/be-nice-now-social-media-examples")
                        day day
                        pipe-endpoints pipe-endpoints
                        idx_1_based)
          {:keys [style path-fn]} (svg/multi-stroke (for [i (range idx_1_based)]
                                                      (let [gray-tone (int (max 0
                                                                                (- 255
                                                                                   (* (inc i)
                                                                                      (/ 255 idx_1_based)))))
                                                            line-width (int (* (inc i)
                                                                               (/ grid-size
                                                                                  idx_1_based)))]
                                                        {:width line-width
                                                         :colour {:r gray-tone
                                                                  :g gray-tone
                                                                  :b gray-tone}})))
          hiccup-svg (tile/grid
                       (pipes/swatches
                         pipe-endpoints pipe-endpoints
                         {:line-fn (fn [& args]
                                     (path-fn (apply line-fn args)))
                          :style style
                          :grid-size grid-size})
                       day day
                       {:transform-fn tile/transform-rotate})]
      (try
        (println description)
        (patterns/render
          filename
          hiccup-svg
          :png)
        (spit (str filename ".txt") description)
        (catch Error e
          (println e)
          (throw (ex-info "Error" {} e)))))))

(comment
  (instagram-2018-47))
